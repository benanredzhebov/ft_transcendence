// init the package
npm init -y
// install the dependencies sqlite3/fastify static, formody for forms , knex for data base

npm install @fastify/formbody@^8.0.2 @fastify/static@^8.1.1 fastify@^5.3.0 knex@^3.1.0 sqlite3@^5.1.7

// instile the server monitor
npm install nodemon@^3.1.9 --save-dev



/// -------------knex and data base------------
//-------init knex and the data  base
// npm install knex --save
// npm install sqlite3
// npx knex init

1. npx knex init
    -delet everything outside development
 2. Run the initial migration
  - npx knex migrate:make "name"
  - configure the up  and down functions
 3.  npx knex migrate:latest

//-------------------https-------------------
Steps to Set Up HTTPS
Obtain an SSL/TLS Certificate:
For development, you can generate a self-signed certificate using tools like OpenSSL.
For production, obtain a certificate from a trusted Certificate Authority (CA) like Let's Encrypt.
Generate a Self-Signed Certificate (for Development): Run the following command to generate a private key and a certificate:

command:
    mkdir -p https_keys && openssl req -nodes -new -x509 -keyout https_keys/private-key.pem -out https_keys/certificate.pem -days 365

This will create two files:
private-key.pem: Your private key.
certificate.pem: Your self-signed certificate.


//----------------- connect with react -----------------
--
npm install typescript --save-dev
npm run buld

------------------ install socket .io--------
npm install socket.io
npm install socket.io-client







// fastify.put('/data/:id',async (req,reply) => {
// 	const { id } = req.params;
// 	if (!id) {
// 		reply.status(400).send({ error: 'ID is required' });
// 		return;
// 	}
// 	const { message } = req.body;
// 	if (!message) {
// 		reply.status(400).send({ error: 'Message is required' });
// 		return;
// 	}
// 	try {  // use update function from knex to update what you want, i add message as parameter
// 		const currentTable = await DB('credentialsTable').where({id}).update({message});
// 		reply.send(currentTable);
// 		console.log("Updatetd");
// 	} catch (e) {
// 		console.log(e);
// 	}
//
// });


// fastify.post('/delete',async (req,reply) => {
// 	// reply.sendFile('delete.html'); // File must exist in the 'public' folder
//
// 	const { id } = req.body;  // body for forms, params for url
// 	if (!id) {
// 		reply.status(400).send({ error: 'ID is required' });
// 		return;
// 	}
// 	try{
// 		const currentTable = await DB("credentialsTable").where({id}).del();
// 		reply.send(currentTable);
// 		console.log("deleted");
//
// 	} catch (e) {
// 		console.log(e);
// 	}
// });

//get by id
// fastify.get('/data/:id', async (req, reply) => {
// 	const {id} = req.params;
//
// 	try {
// 		const tableId = await DB("credentialsTable").where({id});
// 		reply.send(tableId);
// 		console.log("deleted");
// 	} catch (e) {
// 		console.log(e);
// 	}
// });
